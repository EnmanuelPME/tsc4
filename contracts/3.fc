() recv_internal() {
}
(int) lgn (int a) asm "UBITSIZE";
forall X -> int empty (X x) asm "ISNULL";
forall X -> (tuple, ()) pb (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) popb (tuple t) asm "UNCONS";


;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
  slice sc = linked_list.begin_parse();
  builder bd = begin_cell();
  int n2 = lgn( value );
  int n1 = lgn( flag );
  
  
  int blgn = 0;
  int window = 0;
  int wlgn = 0;
  tuple pila = null();

  while(~ sc.slice_empty?()){
    while(~ sc.slice_data_empty?()){
      window = window * 2;
      window ^= sc~load_uint(1);
      wlgn = wlgn + 1;
      if (wlgn == n1){
        if (window == flag){
          if ((blgn + n2) > 1023){
            pila~pb(bd);
            bd = begin_cell();
            blgn = 0;
          }
          bd~store_uint(value, n2);
          window = 0;
          wlgn = 0;
          blgn += n2;
        } else {
          if ((blgn + 1) > 1023){
            pila~pb(bd);
            bd = begin_cell();
            blgn = 0;
          }
          if (window & (1 << (n1 - 1))){
            bd~store_uint(1, 1);
          } else {
            bd~store_uint(0, 1);
          }
          blgn += 1;
          wlgn -= 1;
          window %= (1 << (n1 - 1));
        }
      }
    }
    if (~ sc.slice_refs_empty?()){
      sc = sc~load_ref().begin_parse();
    }
  }

  if ((blgn + wlgn) > 1023){
    pila~pb(bd);
    bd = begin_cell();
  }
  bd~store_uint(window, wlgn);
  pila~pb(bd);

  cell ans = pila~popb().end_cell();
  while(~ pila.empty()){
    ans = pila~popb().store_ref(ans).end_cell();
  }

  return ans;
}
