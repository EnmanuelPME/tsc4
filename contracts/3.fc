() recv_internal() {
}

forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
(int) tamanobit (int a) asm "UBITSIZE";
forall X -> int is_null (X x) asm "ISNULL";

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
  builder b = begin_cell();
  slice s = linked_list.begin_parse();
  int n = tamanobit( flag );
  int m = tamanobit( value );
  tuple pila = null();
  int tamano = 0;
  int coso1 = 0;
  int coso2 = 0;

  while(~ s.slice_empty?()){
    while(~ s.slice_data_empty?()){
      coso1 <<= 1;
      coso1 ^= s~load_uint(1);
      coso2 += 1;
      if (coso2 == n){
        if (coso1 == flag){
          if ((tamano + m) > 1023){
            pila~push_back(b);
            b = begin_cell();
            tamano = 0;
          }
          b~store_uint(value, m);
          coso1 = 0;
          coso2 = 0;
          tamano += m;
        } else {
          if ((tamano + 1) > 1023){
            pila~push_back(b);
            b = begin_cell();
            tamano = 0;
          }
          if (coso1 & (1 << (n - 1))){
            b~store_uint(1, 1);
          } else {
            b~store_uint(0, 1);
          }
          tamano += 1;
          coso2 -= 1;
          coso1 %= (1 << (n - 1));
        }
      }
    }
    if (~ s.slice_refs_empty?()){
      s = s~load_ref().begin_parse();
    }
  }

  if ((tamano + coso2) > 1023){
    pila~push_back(b);
    b = begin_cell();
  }
  b~store_uint(coso1, coso2);
  pila~push_back(b);

  cell ans = pila~pop_back().end_cell();
  while(~ pila.is_null()){
    ans = pila~pop_back().store_ref(ans).end_cell();
  }

  return ans;
}
