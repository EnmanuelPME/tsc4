{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, (X)) popb(tuple t) asm "UNCONS";
forall X -> (tuple, ()) pb(tuple tail, X head) asm "CONS";


;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  slice sc = text.begin_parse();
  builder bd = begin_cell();

  if (sc.slice_refs() > 0) {
    cell prox = sc~load_ref();
    bd = bd.store_ref(caesar_cipher_encrypt(shift, prox));
  }

  shift -= (shift / 26) * 26;
  if (shift == 0) {
    return text;
  }

  while (~ sc.slice_empty?()) {
    int ch = sc~load_uint(8);
    if (ch >= 97) & (ch <= 122) {
      ch += shift;
      if (ch > 122) {
        ch = 96 + (ch - 122);
      }
    }

    if (ch >= 65) & (ch <= 90) {
      ch += shift;
      if (ch > 90) {
        ch = 64 + (ch - 90);
      }
    }
    bd~store_uint(ch, 8);
  }

  return bd.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  shift -= (shift / 26) * 26;
  if (shift == 0) {
    return text;
  }

  builder bd = begin_cell();
  slice sc = text.begin_parse();

  if (sc.slice_refs() > 0) {
    cell prox = sc~load_ref();
    bd = bd.store_ref(caesar_cipher_decrypt(shift, prox));
  }

  while (~ sc.slice_empty?()) {
    int ch = sc~load_uint(8);
    if (ch >= 97) & (ch <= 122) { 
      ch -= shift;
      if (ch < 97) {
        ch = 123 - (97 - ch);
      }
    }

    if (ch >= 65) & (ch <= 90) {
      ch -= shift;
      if (ch < 65) {
        ch = 91 - (65 - ch);
      }
    }
    bd~store_uint(ch, 8);
  }

  return bd.end_cell();
}
